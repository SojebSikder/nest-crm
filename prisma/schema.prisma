// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// main tenant (important table), if this table deleted, 
// then everything will be deleted linked to this table
model Organization {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name         String?
  phone_number String?
  website      String?

  // trial information
  trial_end_at DateTime?

  users                      User[]
  roles                      Role[]
  workspaces                 Workspace[]
  workspace_teams            WorkspaceTeam[]
  snippets                   Snippet[]
  files                      File[]
  contacts                   Contact[]
  workspace_users            WorkspaceUser[]
  workspace_team_users       WorkspaceTeamUser[]
  workspace_channels         WorkspaceChannel[]
  contact_workspace_channels ContactWorkspaceChannel[]
  conversations              Conversation[]
  Subscription               Subscription[]

  @@map("organizations")
}

// User profile
model Profile {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  fname    String?
  lname    String?
  bio      String?
  language String?
  user     User    @relation(fields: [user_id], references: [id])
  user_id  Int     @unique

  @@map("profiles")
}

// User table
model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // available values:
  // online, busy, offline
  availability String?

  email    String?  @unique
  username String?  @unique
  fname    String?  @db.VarChar(255)
  lname    String?  @db.VarChar(255)
  password String?  @db.VarChar(255)
  domain   String?  @unique
  profile  Profile?

  // billing id. e.g. stripe customer id
  billing_id String?

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  ucodes                 Ucode[]
  role_users             RoleUser[]
  sender_notifications   Notification[]      @relation("sender")
  receiver_notifications Notification[]      @relation("receiver")
  workspace_users        WorkspaceUser[]
  workspace_team_users   WorkspaceTeamUser[]
  contacts               Contact[]
  subscriptions          Subscription[]

  @@map("users")
}

// This Ucode table for storing temporary token/code for use of
// email verification, forgot password etc
model Ucode {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  user_id Int?
  user    User? @relation(fields: [user_id], references: [id])

  token      String?   @db.Text
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

// Store list of Roles
model Role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title String?
  name  String?

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]

  @@map("roles")
}

// Store List of permissions
model Permission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title            String?
  action           String?
  subject          String?
  conditions       String?          @db.Text
  fields           String?          @db.Text
  permission_roles PermissionRole[]
  roles            Role[]

  @@map("permissions")
}

// permission and role relationship
model PermissionRole {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id Int
  permission    Permission? @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

// role and user relationship
model RoleUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// just for example
// model Note {
//   id         Int       @id @default(autoincrement())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

//   @@map("notes")
// }

// notification event
model NotificationEvent {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  type          String?
  text          String?        @db.Text
  notifications Notification[]

  @@map("notification_events")
}

// notification
model Notification {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // user_who_fired_event
  sender_id   Int?
  sender      User? @relation("sender", fields: [sender_id], references: [id])
  // user_to_notify 
  receiver_id Int?
  receiver    User? @relation("receiver", fields: [receiver_id], references: [id])

  // notification id
  notification_event_id Int?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  // entity id, e.g. message_id
  entity_id Int?

  // seen_by_user, Is message seen by user (receiver user)
  read_at DateTime?

  @@map("notifications")
}

// ------------------ workspace ---------------
// workspace
model Workspace {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // workspace name
  name     String?
  timezone String?

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  workspace_users WorkspaceUser[]
  workspace_teams WorkspaceTeam[]

  contacts                   Contact[]
  snippets                   Snippet[]
  files                      File[]
  conversations              Conversation[]
  workspace_channels         WorkspaceChannel[]
  contact_workspace_channels ContactWorkspaceChannel[]
  roles                      Role[]

  @@map("workspaces")
}

// workspace and user relationship
// store workspace team member
model WorkspaceUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@id([workspace_id, user_id])
  @@map("workspace_users")
}

// workspace
// create workspace team
model WorkspaceTeam {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name        String?
  description String? @db.Text

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  workspace_team_users WorkspaceTeamUser[]

  @@map("workspace_teams")
}

// workspace_team and user relationship
// store user to workspace_team
model WorkspaceTeamUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_team_id Int
  workspace_team    WorkspaceTeam? @relation(fields: [workspace_team_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@id([workspace_team_id, user_id])
  @@map("workspace_team_users")
}

// workspace channel (currently supported: whatsapp) for tenant
model WorkspaceChannel {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  channel_type String? @default("whatsapp")

  // ----whatsapp section----
  // business profile
  avatar      String?
  address     String?
  description String?
  email       String?
  vertical    String?
  website_1   String?
  website_2   String?
  // end business profile

  channel_name                   String?
  whatsapp_phone_number          String?
  whatsapp_business_account_name String?
  whatsapp_verified_name         String?

  webhook_key  String?
  verify_token String?

  // whatsapp business account access token
  access_token    String? @db.Text
  // whatsapp business account id
  account_id      String? @db.Text
  phone_number_id String?

  verified Boolean? @default(false)
  // ----end whatsapp section----

  // TODO currently not using, planning to remove
  channel_id Int?
  channel    Channel? @relation(fields: [channel_id], references: [id])

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  contact_workspace_channels ContactWorkspaceChannel[]
  messages                   Message[]
  conversations              Conversation[]

  @@map("whatsapp_channels")
}

// message snippet
model Snippet {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name    String?
  message String? @db.Text

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("snippets")
}

// message file
model File {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name        String?
  description String? @db.Text
  attachment  String?

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  // user_id Int?
  // User    User? @relation("user", fields: [user_id], references: [id])

  @@map("files")
}

// customer contact number
model Contact {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  fname        String?
  lname        String?
  email        String?
  phone_number String?

  assignee_id Int?
  assignee    User? @relation(fields: [assignee_id], references: [id], onDelete: SetNull)

  country_id Int?
  country    Country? @relation(fields: [country_id], references: [id], onDelete: SetNull)

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  contact_workspace_channels ContactWorkspaceChannel[]
  messages                   Message[]
  Conversation               Conversation[]

  @@map("contacts")
}

// contact and channel relationship
model ContactWorkspaceChannel {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_channel_id Int
  workspace_channel    WorkspaceChannel? @relation(fields: [workspace_channel_id], references: [id], onDelete: Cascade)

  contact_id Int
  contact    Contact? @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@id([workspace_channel_id, contact_id])
  @@map("contact_workspace_channels")
}

// message conversation
model Conversation {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // is conversation open or close
  is_open Boolean? @default(true)

  contact_id Int?
  contact    Contact? @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  workspace_channel_id Int?
  workspace_channel    WorkspaceChannel? @relation(fields: [workspace_channel_id], references: [id], onDelete: Cascade)

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("conversations")
}

// message
model Message {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  read_at    DateTime?

  // message sent from workspace
  message_from_workspace Boolean? @default(false)

  messaging_product String? @default("whatsapp")
  message_id        String?

  type      String? @default("text")
  // type == text
  body_text String?

  contact_id Int?
  contact    Contact? @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  workspace_channel_id Int?
  workspace_channel    WorkspaceChannel? @relation(fields: [workspace_channel_id], references: [id], onDelete: Cascade)

  conversation_id Int?
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

// ------------------ end workspace ---------------
// all channel list
model Channel {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  type               String?            @default("whatsapp")
  label              String?
  icon               String?
  description        String?            @db.Text
  workspace_channels WorkspaceChannel[]

  @@map("channels")
}

// this table stores countries list
model Country {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  // country flag image
  flag         String?
  // country name
  name         String?
  country_code String?
  dial_code    String?
  contacts     Contact[]

  @@map("countries")
}

// subscription model
// list of plans
model Plan {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  name            String
  // stripe product price id
  plan_price_id   String?
  price_per_month Decimal

  subscriptions Subscription[]

  @@map("plans")
}

// user subscription
model Subscription {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  tenant_id Int
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  plan_id Int
  plan    Plan? @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  start_at DateTime
  end_at   DateTime

  payment_method String?
  User           User?   @relation(fields: [userId], references: [id])
  userId         Int?

  @@map("subscriptions")
}
