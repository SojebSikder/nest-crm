// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User profile
model Profile {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  fname  String?
  lname  String?
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique

  @@map("profiles")
}

// User table
model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  email    String?  @unique
  username String?  @unique
  fname    String?  @db.VarChar(255)
  lname    String?  @db.VarChar(255)
  password String?  @db.VarChar(255)
  domain   String?  @unique
  Profile  Profile?

  tenant_id Int?
  tenant    User?  @relation(name: "tanant", fields: [tenant_id], references: [id])
  tenants   User[] @relation("tanant")

  Roles         Role[]
  RoleUsers     RoleUser[]
  Notes         Note[]
  Ucode         Ucode[]
  Workspace     Workspace[]
  WorkspaceUser WorkspaceUser[]

  @@map("users")
}

// This Ucode table for storing temporary token/code for use of
// email verification, forgot password etc
model Ucode {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  user_id    Int?
  user       User?     @relation(fields: [user_id], references: [id])
  token      String?   @db.Text
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

// Store list of Roles
model Role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title           String?
  tenant_id       Int?
  tenant          User?            @relation(fields: [tenant_id], references: [id])
  PermissionRoles PermissionRole[]
  RoleUsers       RoleUser[]
  permissions     Permission[]

  @@map("roles")
}

// Store List of permissions
model Permission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title           String?
  action          String?
  subject         String?
  conditions      String?          @db.Text
  fields          String?          @db.Text
  PermissionRoles PermissionRole[]
  Roles           Role[]

  @@map("permissions")
}

// permission and role relationship
model PermissionRole {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id Int
  permission    Permission? @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

// role and user relationship
model RoleUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// just for example
model Note {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title String?
  body  String? @db.Text

  tenant_id Int?
  tenant    User? @relation(fields: [tenant_id], references: [id])

  @@map("notes")
}

// ------------------ workspace ---------------
// workspace
model Workspace {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // workspace name
  name     String?
  timezone String?

  tenant_id     Int?
  tenant        User?           @relation(fields: [tenant_id], references: [id])
  WorkspaceUser WorkspaceUser[]

  @@map("workspaces")
}

// workspace and user relationship
// store workspace team member
model WorkspaceUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([workspace_id, user_id])
  @@map("workspace_users")
}

// workspace
// create workspace team
// model WorkspaceTeam {
//   id         Int       @id @default(autoincrement())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   name String?
//   description  String? @db.Text

//   workspace_id Int
//   workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

//   tenant_id Int?
//   tenant    User? @relation(fields: [tenant_id], references: [id])

//   @@map("notes")
// }
// ------------------ end workspace ---------------
