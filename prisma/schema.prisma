// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User profile
model Profile {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  fname    String?
  lname    String?
  bio      String?
  language String?
  User     User    @relation(fields: [user_id], references: [id])
  user_id  Int     @unique

  @@map("profiles")
}

// User table
model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // available values:
  // online, busy, offline
  availability String?

  email    String?  @unique
  username String?  @unique
  fname    String?  @db.VarChar(255)
  lname    String?  @db.VarChar(255)
  password String?  @db.VarChar(255)
  domain   String?  @unique
  Profile  Profile?

  tenant_id Int?
  Tenant    User?  @relation(name: "tanant", fields: [tenant_id], references: [id])
  Tenants   User[] @relation("tanant")

  Roles                Role[]
  RoleUsers            RoleUser[]
  Notes                Note[]
  Ucode                Ucode[]
  Workspace            Workspace[]
  WorkspaceUser        WorkspaceUser[]
  WorkspaceTeam        WorkspaceTeam[]
  WorkspaceTeamUser    WorkspaceTeamUser[]
  WhatsappChannel      WhatsappChannel[]
  Contact              Contact[]
  Snippet              Snippet[]
  File                 File[]
  SenderNotification   Notification[]      @relation("sender")
  ReceiverNotification Notification[]      @relation("receiver")

  @@map("users")
}

// This Ucode table for storing temporary token/code for use of
// email verification, forgot password etc
model Ucode {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  user_id    Int?
  User       User?     @relation(fields: [user_id], references: [id])
  token      String?   @db.Text
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

// Store list of Roles
model Role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title           String?
  tenant_id       Int?
  Tenant          User?            @relation(fields: [tenant_id], references: [id])
  PermissionRoles PermissionRole[]
  RoleUsers       RoleUser[]
  permissions     Permission[]

  @@map("roles")
}

// Store List of permissions
model Permission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title           String?
  action          String?
  subject         String?
  conditions      String?          @db.Text
  fields          String?          @db.Text
  PermissionRoles PermissionRole[]
  Roles           Role[]

  @@map("permissions")
}

// permission and role relationship
model PermissionRole {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id Int
  Permission    Permission? @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id Int
  Role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

// role and user relationship
model RoleUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id Int
  Role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id Int
  User    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// just for example
model Note {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title String?
  body  String? @db.Text

  tenant_id Int?
  Tenant    User? @relation(fields: [tenant_id], references: [id])

  @@map("notes")
}

// notification event
model NotificationEvent {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  type         String?
  text         String?        @db.Text
  Notification Notification[]

  @@map("notification_events")
}

// notification
model Notification {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // user_who_fired_event
  sender_id   Int?
  Sender      User? @relation("sender", fields: [sender_id], references: [id])
  // user_to_notify 
  receiver_id Int?
  Receiver    User? @relation("receiver", fields: [receiver_id], references: [id])

  // notification id
  notification_event_id Int?
  NotificationEvent     NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  // entity id, e.g. message_id
  entity_id Int?

  // seen_by_user, Is message seen by user (receiver user)
  read_at DateTime?

  @@map("notifications")
}

// ------------------ workspace ---------------
// workspace
model Workspace {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // workspace name
  name     String?
  timezone String?

  tenant_id       Int?
  Tenant          User?             @relation(fields: [tenant_id], references: [id])
  WorkspaceUser   WorkspaceUser[]
  WorkspaceTeam   WorkspaceTeam[]
  WhatsappChannel WhatsappChannel[]
  Contact         Contact[]
  Snippet         Snippet[]
  File            File[]
  Conversation    Conversation[]

  @@map("workspaces")
}

// workspace and user relationship
// store workspace team member
model WorkspaceUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_id Int
  Workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  user_id Int
  User    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([workspace_id, user_id])
  @@map("workspace_users")
}

// workspace
// create workspace team
model WorkspaceTeam {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name        String?
  description String? @db.Text

  workspace_id Int
  Workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id         Int?
  Tenant            User?               @relation(fields: [tenant_id], references: [id])
  WorkspaceTeamUser WorkspaceTeamUser[]

  @@map("workspace_teams")
}

// workspace_team and user relationship
// store user to workspace_team
model WorkspaceTeamUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_team_id Int
  WorkspaceTeam     WorkspaceTeam? @relation(fields: [workspace_team_id], references: [id], onDelete: Cascade)

  user_id Int
  User    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([workspace_team_id, user_id])
  @@map("workspace_team_users")
}

// whatsapp channel for tenant
model WhatsappChannel {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // business profile
  avatar      String?
  address     String?
  description String?
  email       String?
  vertical    String?
  website_1   String?
  website_2   String?
  // end business profile

  channel_name                   String?
  whatsapp_phone_number          String?
  whatsapp_business_account_name String?
  whatsapp_verified_name         String?

  webhook_key  String?
  verify_token String?

  // whatsapp business account access token
  access_token    String? @db.Text
  // whatsapp business account id
  account_id      String? @db.Text
  phone_number_id String?

  verified Boolean? @default(false)

  channel_id Int?
  Channel    Channel? @relation(fields: [channel_id], references: [id])

  workspace_id Int
  Workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  Tenant    User? @relation(fields: [tenant_id], references: [id])

  @@map("whatsapp_channels")
}

// message snippet
model Snippet {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name    String?
  message String? @db.Text

  workspace_id Int
  Workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  Tenant    User? @relation(fields: [tenant_id], references: [id])

  // user_id Int?
  // User    User? @relation("user", fields: [user_id], references: [id])

  @@map("snippets")
}

// message file
model File {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name        String?
  description String? @db.Text
  attachment  String?

  workspace_id Int
  Workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  Tenant    User? @relation(fields: [tenant_id], references: [id])

  // user_id Int?
  // User    User? @relation("user", fields: [user_id], references: [id])

  @@map("files")
}

// customer contact number
model Contact {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  fname        String?
  lname        String?
  phone_number String?
  country_code String?

  workspace_id Int
  Workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  tenant_id Int?
  Tenant    User? @relation(fields: [tenant_id], references: [id])

  @@map("contacts")
}

// message conversation
model Conversation {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  messaging_product String?  @default("whatsapp")
  // is conversation
  is_open           Boolean? @default(true)
  creator_id        Int?
  // values: contact, user
  creator_type      String?
  participant_id    Int?
  // values: contact, user
  participant_type  String?

  workspace_id Int
  Workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@map("conversations")
}

// message
model Message {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  read_at    DateTime?

  text            String?
  sender_id       Int?
  // values: contact, user
  sender_type     String?
  receiver_id     Int?
  // values: contact, user
  receiver_type   String?
  conversation_id Int

  @@map("messages")
}

// ------------------ end workspace ---------------
// all channel list
model Channel {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  label           String?
  name            String?
  icon            String?
  description     String?           @db.Text
  WhatsappChannel WhatsappChannel[]

  @@map("channels")
}
